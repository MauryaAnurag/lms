datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  chapters Chapter[]
  attachments Attachment[]
  purchases Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(uuid())
  name String @unique
  courses Course[]
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid())
  userId String

  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id                Int      @id @default(autoincrement())
  code              String   @unique
  discountPercentage Int
  createdAt         DateTime @default(now())
}

model Session {
  id            String   @id @default(uuid())
  title         String
  price         Float
  startTime     DateTime
  endTime       DateTime
  googleMeetLink String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  sessionPurchases SessionPurchase[]

}

model SessionPurchase {
  id          String   @id @default(uuid())
  userId      String
  sessionId   String
  purchaseTime DateTime @default(now())
  amount      Float

  Session     Session  @relation(fields: [sessionId], references: [id])
}

model Voucher {
  id             String   @id @default(uuid())
  title          String
  price          Float
  discountPrice  Float
  description    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
   PaymentVoucher PaymentVoucher[]
}

model PaymentVoucher{
  id          String   @id @default(uuid())
  userId      String
  voucherId   String
  amount      Float
  paymentStatus PaymentStatus
  paymentTime DateTime @default(now())
  razorpayOrderId String?
  razorpayPaymentId String?
  razorpaySignature String?
  
  voucher     Voucher  @relation(fields: [voucherId], references: [id])
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}

